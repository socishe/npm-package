{"version":3,"sources":["components/Form/validator.js","components/composition/FormInput.js","components/composition/FormRadio.js","components/composition/FormCheckbox.js","components/composition/FormTextarea.js","components/Form/Form.js","App.js","reportWebVitals.js","index.js"],"names":["determineClass","input","touched","dirty","validator","data","valid","type","toLowerCase","value","minChar","trim","length","validateText","regex","RegExp","match","validateEmail","element","checked","oneChecked","i","validateCheckbox","FormInput","props","name","required","label","placeholder","onChange","defaultValue","useState","setTouched","setDirty","className","concat","htmlFor","id","onBlur","event","target","currentTarget","isDirty","FormRadio","options","stateOptions","setStateOptions","useEffect","Array","isArray","onValue","map","option","index","FormCheckbox","modify","selectedData","valChecked","push","defaultChecked","FormTextarea","minCharacters","charCount","setCharCount","splitStr","split","strLength","Form","roundBorder","fields","endpoint","onStatus","btnPosition","submitBtnTxt","styles","setStyles","setData","clean","setClean","submitting","setSubmitting","field","classes","onFormChange","countClean","dataValue","val","allClean","noValidate","onSubmit","preventDefault","form","inputData","formData","forEach","replace","extractData","axios","post","then","response","console","log","catch","error","includes","disabled","App","formStatus","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49a9b8b6.chunk.js","sourcesContent":["const validateText = (input) => {\r\n  const { value, minChar } = input;\r\n\r\n  let valid = false;\r\n  if (minChar && minChar !== 0 && value.trim().length >= minChar) {\r\n    valid = true;\r\n  }\r\n\r\n  if (typeof minChar === \"undefined\" && value.trim().length !== 0) {\r\n    valid = true;\r\n  }\r\n\r\n  return valid;\r\n};\r\n\r\nconst validateEmail = (input) => {\r\n  const regex = new RegExp(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}/, \"i\");\r\n\r\n  return input.match(regex) !== null;\r\n};\r\n\r\nconst validateCheckbox = (input) => {\r\n  const { data, element } = input;\r\n\r\n  if (element.checked) {\r\n    return true;\r\n  }\r\n\r\n  let oneChecked = false;\r\n\r\n  // Check if there's at least one selected\r\n  for (let i = 0; i < data.length; i += 1) {\r\n    if (data[i].checked) {\r\n      oneChecked = true;\r\n      break;\r\n    }\r\n  }\r\n\r\n  return oneChecked;\r\n};\r\n\r\nexport const determineClass = (input) => {\r\n  const { touched, dirty } = input;\r\n\r\n  if (touched && dirty) {\r\n    return \"error\";\r\n  }\r\n\r\n  if (touched && !dirty) {\r\n    return \"valid\";\r\n  }\r\n\r\n  return \"\";\r\n};\r\n\r\n/**\r\n * Validate input data\r\n * @param {object} data\r\n * @return {boolean} True when valid, otherwise False\r\n */\r\nconst validator = (data) => {\r\n  let valid = false;\r\n\r\n  switch (data.type.toLowerCase()) {\r\n    case \"text\":\r\n      valid = validateText(data);\r\n      break;\r\n    case \"email\":\r\n      valid = validateEmail(data.value);\r\n      break;\r\n    case \"checkbox\":\r\n      valid = validateCheckbox(data);\r\n      break;\r\n    default:\r\n      valid = false;\r\n      break;\r\n  }\r\n\r\n  return valid;\r\n};\r\n\r\nexport default validator;\r\n","import React, { useState } from \"react\";\r\nimport validator, { determineClass } from \"../Form/validator\";\r\n\r\nconst FormInput = (props) => {\r\n  const {\r\n    name,\r\n    required,\r\n    label,\r\n    type,\r\n    placeholder,\r\n    onChange,\r\n    defaultValue,\r\n  } = props;\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const [dirty, setDirty] = useState(true);\r\n\r\n  const onValue = (event) => {\r\n    const target = event.currentTarget;\r\n    const valid = required ? validator({ type, value: target.value }) : true;\r\n\r\n    setDirty(!valid);\r\n\r\n    if (onChange) {\r\n      onChange({\r\n        name,\r\n        type,\r\n        touched,\r\n        dirty: !valid,\r\n        value: target.value,\r\n      });\r\n    }\r\n  };\r\n\r\n  const onTouch = (event) => {\r\n    const target = event.currentTarget;\r\n\r\n    if (!touched) {\r\n      setTouched(true);\r\n    }\r\n\r\n    const isDirty = required ? target.value.trim().length === 0 : false;\r\n\r\n    setDirty(isDirty);\r\n\r\n    if (onChange) {\r\n      onChange({\r\n        name,\r\n        type,\r\n        touched: true,\r\n        dirty: isDirty,\r\n        value: target.value,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`travism-input-field `.concat(determineClass({touched, dirty}))}\r\n    >\r\n      <label htmlFor={name}>\r\n        {label} {required && <span>*</span>}\r\n      </label>\r\n      <input\r\n        type={type || \"text\"}\r\n        name={name}\r\n        id={name}\r\n        onBlur={onTouch}\r\n        onChange={onValue}\r\n        required={required}\r\n        defaultValue={defaultValue}\r\n        placeholder={placeholder}\r\n      />\r\n\r\n      {touched && dirty && (\r\n        <div className=\"travism-input-error\">Valid {name} is required</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormInput;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport validator, { determineClass } from \"../Form/validator\";\r\n\r\nconst FormRadio = (props) => {\r\n  const { label, required, name, options, onChange } = props;\r\n\r\n  const [stateOptions, setStateOptions] = useState([]);\r\n  const [touched, setTouched] = useState(false);\r\n  const [dirty, setDirty] = useState(true);\r\n\r\n  const type = \"radio\";\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(options)) {\r\n      setStateOptions(options || []);\r\n    }\r\n  }, [options]);\r\n\r\n  const onValue = (event) => {\r\n    const target = event.currentTarget;\r\n    const valid = required\r\n      ? validator({ type: \"text\", value: target.value })\r\n      : true;\r\n\r\n    if (!touched) {\r\n      setTouched(true);\r\n    }\r\n\r\n    setDirty(!valid);\r\n\r\n    if (onChange) {\r\n      onChange({\r\n        name,\r\n        type,\r\n        touched: true,\r\n        dirty: !valid,\r\n        value: target.value,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {stateOptions.length !== 0 && (\r\n        <div\r\n          className={`travism-input-field `.concat(determineClass({touched, dirty}))}\r\n        >\r\n          <fieldset className=\"input-radio\">\r\n            <legend>\r\n              {label} {required && <span>*</span>}\r\n            </legend>\r\n            <div>\r\n              {stateOptions.map((option, index) => {\r\n                return (\r\n                  <div key={`${index}_radio_options`}>\r\n                    <label className=\"choice\">\r\n                      <input\r\n                        type=\"radio\"\r\n                        required={required}\r\n                        name={name}\r\n                        value={option.value}\r\n                        onChange={onValue}\r\n                      />\r\n                      {` ${option.value}`}\r\n                    </label>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </fieldset>\r\n\r\n          {touched && dirty && (\r\n            <div className=\"travism-input-error\">Valid {name} is required</div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormRadio;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { determineClass } from \"../Form/validator\";\r\n\r\nconst FormCheckbox = (props) => {\r\n  const { label, required, type, options, name, onChange } = props;\r\n\r\n  const [stateOptions, setStateOptions] = useState([]);\r\n  const [touched, setTouched] = useState(false);\r\n  const [dirty, setDirty] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(options)) {\r\n      const modify = options.map((option) => {\r\n        return {\r\n          ...option,\r\n          checked: false,\r\n        };\r\n      });\r\n\r\n      setStateOptions(modify);\r\n    }\r\n  }, [options]);\r\n\r\n  const onValue = (event) => {\r\n    const target = event.currentTarget;\r\n\r\n    if (!touched) {\r\n      setTouched(true);\r\n    }\r\n\r\n    let valid = false;\r\n    const selectedData = [];\r\n\r\n    const modify = stateOptions.map((option) => {\r\n      let valChecked = option.checked;\r\n\r\n      if (option.value.toLowerCase() === target.value.toLowerCase()) {\r\n        valChecked = target.checked;\r\n\r\n        if (target.checked) {\r\n          valid = true;\r\n          selectedData.push(target.value);\r\n        }\r\n      } else if (valChecked) {\r\n        valid = true;\r\n        selectedData.push(option.value);\r\n      }\r\n\r\n      return {\r\n        ...option,\r\n        checked: valChecked,\r\n      };\r\n    });\r\n\r\n    setStateOptions(modify);\r\n\r\n    setDirty(!valid);\r\n\r\n    if (onChange) {\r\n      onChange({\r\n        name,\r\n        type,\r\n        touched: true,\r\n        dirty: !valid,\r\n        value: selectedData,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {stateOptions.length !== 0 && (\r\n        <div\r\n          className={`travism-input-field `.concat(\r\n            determineClass({ touched, dirty })\r\n          )}\r\n        >\r\n          <fieldset className=\"input-radio\">\r\n            <legend>\r\n              {label} {required && <span>*</span>}\r\n            </legend>\r\n            <div>\r\n              {stateOptions.map((option, index) => {\r\n                return (\r\n                  <div key={`${index}_checkbox_options`}>\r\n                    <label className=\"choice\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        defaultChecked={option.checked}\r\n                        name={option.value}\r\n                        value={option.value}\r\n                        onChange={onValue}\r\n                      />\r\n                      {` ${option.value}`}\r\n                    </label>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </fieldset>\r\n\r\n          {touched && dirty && (\r\n            <div className=\"travism-input-error\">Valid {name} is required</div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormCheckbox;\r\n","import React, { useState } from \"react\";\r\nimport validator, { determineClass } from \"../Form/validator\";\r\n\r\nconst FormTextarea = (props) => {\r\n  const {\r\n    defaultValue,\r\n    name,\r\n    required,\r\n    label,\r\n    type,\r\n    placeholder,\r\n    onChange,\r\n    minCharacters,\r\n  } = props;\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const [dirty, setDirty] = useState(true);\r\n  const [charCount, setCharCount] = useState(0);\r\n\r\n  const onValue = (event) => {\r\n    const target = event.currentTarget;\r\n    const valid = required\r\n      ? validator({ type: \"text\", value: target.value, minChar: minCharacters })\r\n      : true;\r\n\r\n    const splitStr = target.value.trim().split(\" \");\r\n    let strLength = 0;\r\n\r\n    if (splitStr.length === 1) {\r\n      strLength = splitStr[0] === \"\" ? 0 : 1;\r\n    } else {\r\n      strLength = splitStr.length;\r\n    }\r\n\r\n    setCharCount(strLength);\r\n    setDirty(!valid);\r\n\r\n    if (onChange) {\r\n      onChange({\r\n        name,\r\n        type,\r\n        touched,\r\n        dirty: !valid,\r\n        value: target.value,\r\n      });\r\n    }\r\n  };\r\n\r\n  const onTouch = (event) => {\r\n    const target = event.currentTarget;\r\n\r\n    if (!touched) {\r\n      setTouched(true);\r\n    }\r\n\r\n    let isDirty = false;\r\n\r\n    if (required) {\r\n      if (\r\n        minCharacters &&\r\n        minCharacters.length !== 0 &&\r\n        target.value.trim().length < minCharacters\r\n      ) {\r\n        isDirty = true;\r\n      }\r\n\r\n      if (target.value.trim().length === 0) {\r\n        isDirty = true;\r\n      }\r\n    }\r\n\r\n    setDirty(isDirty);\r\n\r\n    if (onChange) {\r\n      onChange({\r\n        name,\r\n        type,\r\n        touched: true,\r\n        dirty: isDirty,\r\n        value: target.value,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`travism-input-field `.concat(\r\n        determineClass({ touched, dirty })\r\n      )}\r\n    >\r\n      <label htmlFor={name}>\r\n        {label} {required && <span>*</span>}{\" \"}\r\n        {` (${charCount} of ${minCharacters} words)`}\r\n      </label>\r\n      <textarea\r\n        onChange={onValue}\r\n        onBlur={onTouch}\r\n        name={name}\r\n        id={name}\r\n        required={required}\r\n        placeholder={placeholder}\r\n        defaultValue={defaultValue}\r\n      />\r\n\r\n      {touched && dirty && (\r\n        <div className=\"travism-input-error\">Valid {name} is required</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormTextarea;\r\n","import React, { Fragment, useEffect, useState } from \"react\";\r\nimport \"./Form.scss\";\r\nimport {\r\n  FormCheckbox,\r\n  FormInput,\r\n  FormRadio,\r\n  FormTextarea,\r\n} from \"../composition\";\r\nimport axios from \"axios\";\r\n\r\nconst Form = (props) => {\r\n  const {\r\n    roundBorder,\r\n    fields,\r\n    endpoint,\r\n    onStatus,\r\n    btnPosition,\r\n    submitBtnTxt,\r\n  } = props;\r\n\r\n  const [styles, setStyles] = useState({});\r\n  const [data, setData] = useState([]);\r\n  const [clean, setClean] = useState(false);\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const modify = fields.map((field) => {\r\n      let touched = true;\r\n      let dirty = false;\r\n\r\n      if (typeof field.required !== \"undefined\") {\r\n        touched = field.required === true ? false : true;\r\n        dirty = field.required;\r\n      }\r\n\r\n      return {\r\n        ...field,\r\n        touched,\r\n        dirty,\r\n      };\r\n    });\r\n\r\n    setData(modify);\r\n  }, [fields]);\r\n\r\n  useEffect(() => {\r\n    let classes = \"\";\r\n\r\n    if (roundBorder) {\r\n      classes += \" curvey\";\r\n    }\r\n\r\n    setStyles(classes);\r\n  }, [roundBorder]);\r\n\r\n  const onFormChange = (event) => {\r\n    let countClean = 0;\r\n\r\n    const modify = data.map((dataValue) => {\r\n      let val = dataValue;\r\n\r\n      if (dataValue.name === event.name) {\r\n        if (event.touched && !event.dirty) {\r\n          countClean += 1;\r\n        }\r\n\r\n        return {\r\n          ...val,\r\n          dirty: event.dirty,\r\n          touched: event.touched,\r\n          data: event.value,\r\n        };\r\n      }\r\n\r\n      if (val.touched && !val.dirty) {\r\n        countClean += 1;\r\n      }\r\n\r\n      return val;\r\n    });\r\n\r\n    let allClean = false;\r\n\r\n    if (countClean === modify.length) {\r\n      allClean = true;\r\n    }\r\n\r\n    setClean(allClean);\r\n\r\n    if (onStatus) onStatus(allClean);\r\n\r\n    setData(modify);\r\n  };\r\n\r\n  const extractData = (inputData) => {\r\n    const formData = {};\r\n\r\n    inputData.forEach((val) => {\r\n      if (!val.dirty && typeof val.data !== \"undefined\") {\r\n        formData[val.name.replace(\" \", \"_\")] = val.data;\r\n      }\r\n    });\r\n\r\n    return formData;\r\n  };\r\n\r\n  const onSubmitFn = (event) => {\r\n    event.preventDefault();\r\n\r\n    setSubmitting(true);\r\n\r\n    const form = extractData(data);\r\n\r\n    axios\r\n      .post(endpoint, form)\r\n      .then((response) => {\r\n        console.log(response);\r\n        setSubmitting(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        setSubmitting(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className={`travism-form `.concat(styles)}>\r\n      <form noValidate onSubmit={onSubmitFn}>\r\n        {fields.length === 0 && \"Please add form input options\"}\r\n\r\n        {fields.map((field, index) => {\r\n          const type = field.type ? field.type.toLowerCase() : \"\";\r\n\r\n          return (\r\n            <Fragment key={`${index}_input_options`}>\r\n              {![\"radio\", \"checkbox\", \"textarea\"].includes(type) && (\r\n                <FormInput\r\n                  name={field.name || \"\"}\r\n                  type={type || \"text\"}\r\n                  onChange={onFormChange}\r\n                  label={field.label || \"\"}\r\n                  required={field.required || false}\r\n                  placeholder={field.placeholder || \"\"}\r\n                />\r\n              )}\r\n\r\n              {type === \"radio\" && (\r\n                <FormRadio\r\n                  name={field.name}\r\n                  label={field.label}\r\n                  type={type}\r\n                  required={field.required || false}\r\n                  options={field.options}\r\n                  onChange={onFormChange}\r\n                />\r\n              )}\r\n\r\n              {type === \"checkbox\" && (\r\n                <FormCheckbox\r\n                  name={field.name}\r\n                  label={field.label}\r\n                  type={type}\r\n                  required={field.required || false}\r\n                  options={field.options}\r\n                  onChange={onFormChange}\r\n                />\r\n              )}\r\n\r\n              {type === \"textarea\" && (\r\n                <FormTextarea\r\n                  name={field.name}\r\n                  label={field.label}\r\n                  type={type}\r\n                  required={field.required || false}\r\n                  placeholder={field.placeholder || \"\"}\r\n                  defaultValue={field.value}\r\n                  onChange={onFormChange}\r\n                  minCharacters={field.minCharacters || null}\r\n                />\r\n              )}\r\n            </Fragment>\r\n          );\r\n        })}\r\n\r\n        {fields.length !== 0 && (\r\n          <div className={`form-footer `.concat(btnPosition || \"right\")}>\r\n            <button className=\"form-submit\" type=\"submit\" disabled={!clean || submitting}>\r\n              {!submitting && <>{submitBtnTxt || \"Submit Form\"}</>}\r\n              {submitting && \"Submitting...\"}\r\n            </button>\r\n          </div>\r\n        )}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./App.scss\";\r\nimport Form from \"./components/Form\";\r\n\r\nconst App = () => {\r\n  const formData = [\r\n    {\r\n      type: \"text\",\r\n      name: \"name\",\r\n      label: \"First Name\",\r\n      required: true,\r\n      placeholder: \"Enter your first name\",\r\n    },\r\n    {\r\n      type: \"email\",\r\n      name: \"email\",\r\n      label: \"Email Address\",\r\n      required: false,\r\n      placeholder: \"Enter your email address\",\r\n    },\r\n    {\r\n      type: \"radio\",\r\n      name: \"languages\",\r\n      label: \"Which languages do you require?\",\r\n      required: true,\r\n      options: [\r\n        {\r\n          value: \"PHP\",\r\n        },\r\n        {\r\n          value: \"JavaScript\",\r\n        },\r\n        {\r\n          value: \"Java\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      type: \"checkbox\",\r\n      label: \"Select what you want?\",\r\n      required: true,\r\n      name: \"font types\",\r\n      options: [\r\n        {\r\n          value: \"Roboto\",\r\n        },\r\n        {\r\n          value: \"Castoro\",\r\n        },\r\n        {\r\n          value: \"Open Sans\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      type: \"textarea\",\r\n      name: \"special instructions\",\r\n      label: \"Special Instructions\",\r\n      required: true,\r\n      placeholder: \"Write your special instructions...\",\r\n      defaultValue:\r\n        \"This is a real test write now, but when things start to get fun, that's when you change things.\",\r\n      minCharacters: 10,\r\n    },\r\n  ];\r\n\r\n  const onValidate = (formStatus) => {\r\n    console.log(`Form is ${formStatus ? \"Clean\" : \"Dirty\"}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-container\">\r\n      <div className=\"header\">Form builder package</div>\r\n      <div className=\"form-container\">\r\n        <Form\r\n          endpoint=\"http://localhost:3000/npm-package\"\r\n          onStatus={onValidate}\r\n          fields={formData}\r\n          roundBorder\r\n          btnPosition=\"center\"\r\n          submitBtnTxt=\"Submit data\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}